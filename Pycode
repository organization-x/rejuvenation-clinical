from cryptography.fernet import Fernet

# key = Fernet.generate_key() #generates a random key that can be used.
# print (key)
# file = open('key1', 'wb')
# file.write(key) #saves the key to a file to be used to both encrypt and decrypt
# file.close() I have made these as comments so ypu can see what I wrote, but
#It will not run it again. If it runs again, then a new key will generate, and
#I don't want to deal with that to I just made it a comment.

# print (key)

# import base64
# import os
# from cryptography.hazmat.backends import default_backend
# from cryptography.hazmat.primitives import hashes
# from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# password_given = "bestpassword12"
# password = password_given.encode()

# salt = b'\xd1\x08\x1fq\xf0\x04\x03\xd4\x10\xae&G\xebL\x17\x06'
# kdf = PBKDF2HMAC(
#    algorithm=hashes.SHA256(),
#    length=32,
#    salt=salt,
#    iterations=100000,
#    backend=default_backend()
#)
# key = base64.urlsafe_b64encode(kdf.derive(password))
# print (key)


file = open('key1', 'rb')
key = file.read()
file.close()

with open('test', 'rb') as f:
    data = f.read()

fernet = Fernet(key)
encrypted = fernet.encrypt(data)

with open('test.encrypted', 'wb') as f:
    f.write(encrypted)
 